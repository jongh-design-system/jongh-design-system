'use strict';

var child_process = require('child_process');
var nodeLogger = require('storybook/internal/node-logger');

var storybookProcess=null,checkStorybookRunning=async storybookUrl=>{try{return (await fetch(`${storybookUrl}/iframe.html`,{method:"HEAD"})).ok}catch{return !1}},startStorybookIfNotRunning=async()=>{let storybookScript=process.env.__STORYBOOK_SCRIPT__,storybookUrl=process.env.__STORYBOOK_URL__;if(await checkStorybookRunning(storybookUrl)){nodeLogger.logger.verbose("Storybook is already running");return}nodeLogger.logger.verbose(`Starting Storybook with command: ${storybookScript}`);try{storybookProcess=child_process.spawn(storybookScript,[],{stdio:process.env.DEBUG==="storybook"?"pipe":"ignore",cwd:process.cwd(),shell:!0}),storybookProcess.on("error",error=>{throw nodeLogger.logger.verbose("Failed to start Storybook:"+error.message),error});}catch(error){throw nodeLogger.logger.verbose("Failed to start Storybook:"+error.message),error}},killProcess=process2=>new Promise((resolve,reject)=>{process2.on("close",resolve),process2.on("error",reject),process2.kill();}),setup=async({config})=>{config.watch&&await startStorybookIfNotRunning();},teardown=async()=>{storybookProcess&&(nodeLogger.logger.verbose("Stopping Storybook process"),await killProcess(storybookProcess));};

exports.setup = setup;
exports.teardown = teardown;
