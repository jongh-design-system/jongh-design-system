"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_node = require("@pandacss/node");
var import_javascript_stringify = require("javascript-stringify");
var virtualModuleId = "virtual:panda";
var resolvedVirtualModuleId = "\0" + virtualModuleId;
function vitePlugin(configPath) {
  let config;
  async function loadPandaConfig() {
    const ctx = await (0, import_node.loadConfigAndCreateContext)({ configPath });
    config = ctx.config;
  }
  return {
    name: "@pandacss/studio",
    async configureServer(server) {
      server.watcher.add(configPath).on("change", async (path) => {
        if (path !== configPath)
          return;
        await loadPandaConfig();
        const module2 = server.moduleGraph.getModuleById(resolvedVirtualModuleId);
        if (module2)
          await server.reloadModule(module2);
      });
    },
    resolveId(id) {
      if (id === virtualModuleId) {
        return resolvedVirtualModuleId;
      }
      return null;
    },
    async load(id) {
      if (id === resolvedVirtualModuleId) {
        await loadPandaConfig();
        return {
          code: `export const config = ${(0, import_javascript_stringify.stringify)(config)}`
        };
      }
    }
  };
}
var pandaStudio = () => ({
  name: "@pandacss/studio",
  hooks: {
    "astro:config:setup": ({ updateConfig }) => {
      const configPath = process.env.PUBLIC_CONFIG_PATH;
      updateConfig({
        vite: {
          plugins: [vitePlugin(configPath)]
        }
      });
    }
  }
});
var src_default = pandaStudio;
