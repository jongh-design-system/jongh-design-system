(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
async function importId(id) {
  const name = `/@id/${id}`.replace(/\\/g, "/");
  return (/* @__PURE__ */ getBrowserState()).wrapModule(() => import(
    /* @vite-ignore */
    name
  ));
}
async function importFs(id) {
  const name = `/@fs/${id}`.replace(/\\/g, "/");
  return (/* @__PURE__ */ getBrowserState()).wrapModule(() => import(
    /* @vite-ignore */
    name
  ));
}
const executor = {
  isBrowser: true,
  executeId: (id) => {
    if (id[0] === "/" || id[1] === ":") {
      return importFs(id);
    }
    return importId(id);
  }
};
function getConfig() {
  return (/* @__PURE__ */ getBrowserState()).config;
}
// @__NO_SIDE_EFFECTS__
function getBrowserState() {
  return window.__vitest_browser_runner__;
}
// @__NO_SIDE_EFFECTS__
function getWorkerState() {
  const state = window.__vitest_worker__;
  if (!state) {
    throw new Error("Worker state is not found. This is an issue with Vitest. Please, open an issue.");
  }
  return state;
}
export {
  getConfig as a,
  getWorkerState as b,
  executor as e,
  getBrowserState as g
};
