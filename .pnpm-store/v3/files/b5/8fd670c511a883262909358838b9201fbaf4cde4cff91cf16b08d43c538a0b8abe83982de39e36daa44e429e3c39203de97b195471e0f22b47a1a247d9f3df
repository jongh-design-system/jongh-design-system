import ESM_COMPAT_Module from 'node:module';
import { fileURLToPath } from 'node:url';
import { dirname, join, isAbsolute } from 'node:path';
import { execaNode } from './chunk-C654WRL5.mjs';
import { log, STORYBOOK_ADDON_TEST_CHANNEL, TEST_PROVIDER_ID } from './chunk-KHOSIC5P.mjs';
import { require_picocolors } from './chunk-EEU7V67W.mjs';
import { __toESM, __require } from './chunk-HVK6626C.mjs';
import { readFileSync } from 'node:fs';
import { checkAddonOrder, serverRequire, getFrameworkName } from 'storybook/internal/common';
import { TESTING_MODULE_RUN_ALL_REQUEST, TESTING_MODULE_RUN_REQUEST, TESTING_MODULE_WATCH_MODE_REQUEST, TESTING_MODULE_CRASH_REPORT, TESTING_MODULE_CANCEL_TEST_RUN_REQUEST } from 'storybook/internal/core-events';
import { telemetry, oneWayHash } from 'storybook/internal/telemetry';
import { dedent } from 'ts-dedent';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
ESM_COMPAT_Module.createRequire(import.meta.url);
var import_picocolors=__toESM(require_picocolors());var MAX_START_TIME=3e4,vitestModulePath=join(__dirname,"node","vitest.mjs"),child,ready=!1,bootTestRunner=async(channel,initEvent,initArgs)=>{let stderr=[];function reportFatalError(e){channel.emit(TESTING_MODULE_CRASH_REPORT,{providerId:TEST_PROVIDER_ID,error:{message:String(e)}});}let forwardRun=(...args)=>child?.send({args,from:"server",type:TESTING_MODULE_RUN_REQUEST}),forwardRunAll=(...args)=>child?.send({args,from:"server",type:TESTING_MODULE_RUN_ALL_REQUEST}),forwardWatchMode=(...args)=>child?.send({args,from:"server",type:TESTING_MODULE_WATCH_MODE_REQUEST}),forwardCancel=(...args)=>child?.send({args,from:"server",type:TESTING_MODULE_CANCEL_TEST_RUN_REQUEST}),killChild=()=>{channel.off(TESTING_MODULE_RUN_REQUEST,forwardRun),channel.off(TESTING_MODULE_RUN_ALL_REQUEST,forwardRunAll),channel.off(TESTING_MODULE_WATCH_MODE_REQUEST,forwardWatchMode),channel.off(TESTING_MODULE_CANCEL_TEST_RUN_REQUEST,forwardCancel),child?.kill(),child=null;},exit=(code=0)=>{killChild(),process.exit(code);};process.on("exit",exit),process.on("SIGINT",()=>exit(0)),process.on("SIGTERM",()=>exit(0));let startChildProcess=()=>new Promise((resolve,reject)=>{child=execaNode(vitestModulePath),stderr=[],child.stdout?.on("data",log),child.stderr?.on("data",data=>{data.toString().match(/^\u001B\[33m/)||(log(data),stderr.push(data.toString()));}),child.on("message",result=>{if(result.type==="ready")initEvent&&initArgs&&child?.send({type:initEvent,args:initArgs,from:"server"}),channel.on(TESTING_MODULE_RUN_REQUEST,forwardRun),channel.on(TESTING_MODULE_RUN_ALL_REQUEST,forwardRunAll),channel.on(TESTING_MODULE_WATCH_MODE_REQUEST,forwardWatchMode),channel.on(TESTING_MODULE_CANCEL_TEST_RUN_REQUEST,forwardCancel),resolve();else if(result.type==="error"){killChild(),log(result.message),log(result.error);let error=new Error(`${result.message}
${result.error}`);ready?reportFatalError(error):reject(error);}else channel.emit(result.type,...result.args);});}),timeout=new Promise((_,reject)=>setTimeout(reject,MAX_START_TIME,new Error(`Aborting test runner process because it took longer than ${MAX_START_TIME/1e3} seconds to start.`)));await Promise.race([startChildProcess(),timeout]).catch(e=>{throw reportFatalError(e),e});},runTestRunner=async(channel,initEvent,initArgs)=>{child||(ready=!1,await bootTestRunner(channel,initEvent,initArgs),ready=!0);};var checkActionsLoaded=configDir=>{checkAddonOrder({before:{name:"@storybook/addon-actions",inEssentials:!0},after:{name:"@storybook/experimental-addon-test",inEssentials:!1},configFile:isAbsolute(configDir)?join(configDir,"main"):join(process.cwd(),configDir,"main"),getConfig:configFile=>serverRequire(configFile)});},experimental_serverChannel=async(channel,options)=>{let core=await options.presets.apply("core"),builderName=typeof core?.builder=="string"?core.builder:core?.builder?.name,framework=await getFrameworkName(options);if(!builderName?.includes("vite"))return framework.includes("nextjs")&&log(dedent`
        You're using ${framework}, which is a Webpack-based builder. In order to use Storybook Test, with your project, you need to use '@storybook/experimental-nextjs-vite', a high performance Vite-based equivalent.

        Information on how to upgrade here: ${import_picocolors.default.yellow("https://storybook.js.org/docs/get-started/frameworks/nextjs#with-vite")}\n
      `),channel;let execute=eventName=>(...args)=>{runTestRunner(channel,eventName,args);};if(channel.on(TESTING_MODULE_RUN_ALL_REQUEST,execute(TESTING_MODULE_RUN_ALL_REQUEST)),channel.on(TESTING_MODULE_RUN_REQUEST,execute(TESTING_MODULE_RUN_REQUEST)),channel.on(TESTING_MODULE_WATCH_MODE_REQUEST,payload=>{payload.watchMode&&execute(TESTING_MODULE_WATCH_MODE_REQUEST)(payload);}),!core.disableTelemetry){let packageJsonPath=__require.resolve("@storybook/experimental-addon-test/package.json"),{version:addonVersion}=JSON.parse(readFileSync(packageJsonPath,{encoding:"utf-8"}));channel.on(STORYBOOK_ADDON_TEST_CHANNEL,event=>{telemetry("addon-test",{...event,payload:{...event.payload,storyId:oneWayHash(event.payload.storyId)},addonVersion});});}return channel},previewAnnotations=async(entry=[],options)=>(checkActionsLoaded(options.configDir),entry),managerEntries=async(entry=[],options)=>{if(await options.presets.apply("ADDON_INTERACTIONS_IN_USE",!1)){let error=new Error(dedent`
        You have both "@storybook/addon-interactions" and "@storybook/experimental-addon-test" listed as addons in your Storybook config. This is not allowed, as @storybook/experimental-addon-test is a replacement for @storybook/addon-interactions.

        Please remove "@storybook/addon-interactions" from the addons array in your main Storybook config at ${options.configDir} and remove the dependency from your package.json file.
      `);throw error.name="AddonConflictError",error}return entry};

export { checkActionsLoaded, experimental_serverChannel, managerEntries, previewAnnotations };
