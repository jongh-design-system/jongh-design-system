{"name":"Avatar","dependencies":["@radix-ui/react-avatar"],"files":[{"name":"index.tsx","content":"import * as AvatarPrimitive from \"@radix-ui/react-avatar\"\nimport { createStyleContext } from \"@utils/createStyleContext\"\nimport { avatar } from \"@styled-system/recipes\"\nimport type {\n  Assign,\n  HTMLStyledProps,\n  ComponentProps,\n} from \"@styled-system/types\"\n\nconst { withProvider, withContext } = createStyleContext(avatar)\n\nexport const Root = withProvider<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<\"span\">, ComponentProps<typeof AvatarPrimitive.Root>>\n>(AvatarPrimitive.Root, \"root\")\n\nexport const Image = withContext<\n  HTMLImageElement,\n  Assign<HTMLStyledProps<\"img\">, ComponentProps<typeof AvatarPrimitive.Image>>\n>(AvatarPrimitive.Image, \"image\")\n\nexport const Fallback = withContext<\n  HTMLSpanElement,\n  Assign<\n    HTMLStyledProps<\"span\">,\n    ComponentProps<typeof AvatarPrimitive.Fallback>\n  >\n>(AvatarPrimitive.Fallback, \"fallback\")\n"},{"name":"recipe.ts","content":"import { defineSafe } from \"@utils/defineSafe\"\n\nexport const avatarRecipe = defineSafe.slotRecipe({\n  className: \"avatar\",\n  description: \"Styles for the Avatar component\",\n  slots: [\"root\", \"image\", \"fallback\"],\n  base: {\n    root: {\n      position: \"relative\",\n      display: \"flex\",\n      h: \"12\",\n      w: \"12\",\n      flexShrink: \"0\",\n      overflow: \"hidden\",\n      rounded: \"full\",\n    },\n    image: {\n      aspectRatio: \"square\",\n      h: \"full\",\n      w: \"full\",\n    },\n    fallback: {\n      display: \"flex\",\n      h: \"full\",\n      w: \"full\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      rounded: \"full\",\n      bg: \"muted\",\n    },\n  },\n})\n"}]}